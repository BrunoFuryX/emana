var lastScrollTop=0;jQuery(window).scroll(function(t){var e=jQuery(this).scrollTop();e>150?(jQuery("body").addClass("moving"),e>lastScrollTop?jQuery("body").addClass("moving--down"):jQuery("body").removeClass("moving--down"),lastScrollTop=e):jQuery("body").removeClass("moving")}),console.log("aaaa"),$(".showcase__list[data-carousel=true]")&&$(".showcase__list[data-carousel=true]").each(function(){$(this).find(".showcase__item--empty").remove(),$(this).not(".slick-initialized").slick({mobileFirst:!1,slidesToShow:4,slidesToScroll:4,prevArrow:'<button aria-label="prev" type="button" class="slick-prev"><</button>',nextArrow:'<button aria-label="prev" type="button" class="slick-next">></button>',responsive:[{breakpoint:424,settings:{slidesToShow:2,slidesToScroll:2}},{breakpoint:767,settings:{slidesToShow:3,slidesToScroll:3}},{breakpoint:991,settings:{slidesToShow:4,slidesToScroll:4}}]})}),$(".banner--javascript .banner__list")&&$(".banner--javascript .banner__list").not(".slick-initialized").slick({mobileFirst:!1,infinite:!1,slidesToShow:1,slidesToScroll:1,prevArrow:'<button aria-label="prev" type="button" class="slick-prev"><</button>',nextArrow:'<button aria-label="next" type="button" class="slick-next">></button>',responsive:[{breakpoint:424,settings:{slidesToShow:1,slidesToScroll:1}},{breakpoint:767,settings:{slidesToShow:1,slidesToScroll:1}}]}),$(".banner--grid .banner__list")&&$(".banner--grid .banner__list").not(".slick-initialized").slick({mobileFirst:!0,slidesToShow:1,slidesToScroll:1,prevArrow:'<button type="button" aria-label="prev" class="slick-prev"><</button>',nextArrow:'<button type="button" aria-label="next" class="slick-next">></button>',responsive:[{breakpoint:424,settings:{slidesToShow:3,slidesToScroll:3}},{breakpoint:767,settings:{slidesToShow:4,slidesToScroll:4}}]});var button=$("#bt-submit-comments");if(button){var buttonAction=$('<button class="comments__button" type="button">Avaliar</button>');button.after(buttonAction),buttonAction.click(()=>{button.trigger("click")})}function debounce(t){var e;return function(i){e&&clearTimeout(e),e=setTimeout(t,200,i)}}function navigationHiddenResize(){var t=$(".menu--navigation .menu__ul--nv1").outerWidth(),e=0;$(".menu--navigation .menu__item--nv1").removeClass("menu__item--hidden"),$(".menu--navigation .menu__item--nv1").each(function(){(e+=$(this).outerWidth())>t&&$(this).addClass("menu__item--hidden")})}function navigationAlign(){$(".menu--navigation").each(function(){$(this).find(".menu--nv2").removeClass("menu--rtl"),$(this).find(".menu--nv2").each(function(){var t=$(this).closest(".menu--nv1").outerWidth();$(this).offset().left+$(this).outerWidth()>t&&$(this).addClass("menu--rtl")})})}var childs=Array.from(document.querySelectorAll(".menu__item--has-child"));childs.forEach(t=>{t.addEventListener("click",t=>{var e=t.target;if(e.classList.contains("menu__item--has-child")){var i=e.getAttribute("aria-expanded");"true"!==i&&"false"!==i&&(i="false"),e.setAttribute("aria-expanded","true"!==i),$(e).find("> .menu--sub").slideToggle()}},!1)}),window.addEventListener("resize",debounce(function(t){navigationHiddenResize(),navigationAlign()})),navigationHiddenResize(),navigationAlign(),$(".button--menu").on("click",function(){$("body").addClass("menu__open")}),$(".button__close--navigation").on("click",function(){$("body").removeClass("menu__open")}),$(".rulers__list").not(".slick-initialized").slick({mobileFirst:!0,slidesToShow:1,slidesToScroll:1,infinite:!1,prevArrow:'<button type="button" aria-label="prev" class="slick-prev"><</button>',nextArrow:'<button type="button" aria-label="next" class="slick-next">></button>',responsive:[{breakpoint:767,settings:{slidesToShow:2,slidesToScroll:2}},{breakpoint:991,settings:{slidesToShow:3,slidesToScroll:3}},{breakpoint:1023,settings:{slidesToShow:4,slidesToScroll:4}}]});var $=$tray;if("function"==typeof $){function loadThumb(){var t=$(".produto-imagem-miniaturas");if(t.length){t.hide();var e=t.find("img, .icon-video");let i;$(".thumbs").length&&$(".thumbs").remove(),e.length&&(i='<div class="thumbs">',i+='<ul class="thumbs__list">',e.each((t,e)=>{i+=createThumb($(e).attr("src"),t)}),i+="</ul>",i+="</div>",t.after(i),$(document).trigger("thumbs:start"),$(".thumbs a").click(e=>{let i=$(e.currentTarget).attr("data-index");selectThumb(i),$(e.currentTarget).find(".thumb__video").length?$("#colVideo").show():($($("a",t).eq(i)).mouseover().click(),$("#colVideo").hide()),e.preventDefault()}),selectThumb("0"))}}function selectThumb(t){$(".thumbs li").removeClass("thumbs__item--actived"),$(`.thumbs [data-index=${t}]`).closest("li").addClass("thumbs__item--actived")}function createThumb(t,e){return t?`<li class="thumbs__item"><a class="thumbs__link" data-index="${e}" href="#${e}"><img class="thumbs__image" src="${t}" /></a></li>`:`<li class="thumbs__item"><a class="thumbs__link" data-index="${e}" href="#${e}"><span class="thumb__video"></span></a></li>`}$(document).ready(function(){$(window).ajaxComplete(function(t,e,i){i&&-1!==i.url.indexOf("variant_gallery")&&loadThumb()}),loadThumb()})}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,